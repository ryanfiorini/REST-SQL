using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using REST_SQL;
using REST_SQL.Models;
using Newtonsoft.Json;
using System.Web;
using Newtonsoft.Json.Serialization;

namespace Test
{
    [TestClass]
    public class openTests
    {
        [TestMethod]
        public void PostPersonProcedure()
        {

            Procedure procedure = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            procedure.SetValue<string>("@FIRST_NAME", "alan"); //with @
            procedure.SetValue<string>("LAST_NAME", "Hyneman"); //without @
            procedure.SetValue<string>("@EMAIL", "alan.h.hyneman@gmail.com");

            string result = procedure.ExecuteJson();
            Console.WriteLine(result);
            Assert.AreEqual(procedure.GetValue<int>("RETURN_VALUE"), 200);
            Assert.AreEqual(procedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreEqual(procedure.GetValue<string>("MESSAGE_RESULT"), null);

        }


        [TestMethod]
        public void PostPersonJSON()
        {
            var dynamic = new
            {
                FirstName = "alan",
                LastName = "hyneman",
                Email = "ahyneman@bankmobile.com"
            };
            var jsonSerializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
            string postData = JsonConvert.SerializeObject(dynamic, jsonSerializerSettings);
            RestProcedure restProcedure = ProcedureFactory.GetRestProcedure("POST", "open", "PERSON"); //following convention shema.METHOD_PROC
            restProcedure.LoadFromJson(postData);
            string json = restProcedure.ExecuteJson();
            Assert.AreEqual(restProcedure.GetValue<int>("RETURN_VALUE"), 200);
            Assert.AreEqual(restProcedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreEqual(restProcedure.GetValue<string>("MESSAGE_RESULT"), null);
            Console.WriteLine(json);

        }


    }


}
