using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using REST_SQL;
using REST_SQL.Models;
using Newtonsoft.Json;
using System.Web;
using Newtonsoft.Json.Serialization;
using System.Dynamic;

namespace Test
{
    [TestClass]
    public class openTests
    {
        private string firstName = "dick";
        private string lastName = "tracy";
        private string email = "private.eye@gmail.com";
        private static string personResult = null;

        [TestMethod]
        public void PostPersonPostSuccess()
        {
            Procedure procedure = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            procedure.SetValue<string>("@FIRST_NAME", firstName); //with @
            procedure.SetValue<string>("LAST_NAME", lastName); //without @
            procedure.SetValue<string>("@EMAIL", email);

            personResult = procedure.ExecuteJson();

            Assert.AreEqual(procedure.GetValue<int>("RETURN_VALUE"), 200);
            Assert.AreEqual(procedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreEqual(procedure.GetValue<string>("MESSAGE_RESULT"), null);
            procedure.Dispose();

        }

        [TestMethod]
        public void PostPersonPostDuplicate()
        {
            Procedure procedure = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            procedure.SetValue<string>("@FIRST_NAME", firstName); //with @
            procedure.SetValue<string>("LAST_NAME", lastName); //without @
            procedure.SetValue<string>("@EMAIL", email);

            procedure.ExecuteJson();
            Assert.AreEqual(procedure.GetValue<int>("RETURN_VALUE"), 409);
            Assert.AreEqual(procedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreNotEqual(procedure.GetValue<string>("MESSAGE_RESULT"), null);
            procedure.Dispose();
        }

        [TestMethod]
        public void PostPersonBadParameters()
        {
            string firstNameException = null;
            string lastNameException = null;
            string emailException = null;

            Procedure procedure = ProcedureFactory.GetProcedure("open", "POST_PERSON");
            procedure.SetValue<string>("@FIRST_NAME", "this is a first name that exeeds the character maximum length"); 
            procedure.SetValue<string>("@LAST_NAME", "this is a first name that exeeds the character maximum length"); 
            procedure.SetValue<string>("@EMAIL", "badbademail@.bad");

            try
            {
                procedure.ExecuteJson();
            }
            catch(ArgumentException ex)
            {
                firstNameException = ex.ParamName;
                procedure.SetValue<string>("FIRST_NAME", "shorter string");
            }
            Assert.AreEqual("@FIRST_NAME", firstNameException);


            try
            {
                procedure.ExecuteJson();
            }
            catch (ArgumentException ex)
            {
                lastNameException = ex.ParamName;
                procedure.SetValue<string>("LAST_NAME", "shorter string");
            }
            Assert.AreEqual("@LAST_NAME", lastNameException);


            try
            {
                procedure.ExecuteJson();
            }
            catch (ArgumentException ex)
            {
                emailException = ex.ParamName;
                procedure.SetValue<string>("EMAIL", "A@a.com");
            }
            Assert.AreEqual("@EMAIL", emailException);


            procedure.Dispose();

        }


        [TestMethod]
        public void PostPersonJsonSuccess()
        {
            var dynamic = new
            {
                FirstName = "mike",
                LastName = "mike",
                Email = "mike@mike.com"
            };
            var jsonSerializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
            string postData = JsonConvert.SerializeObject(dynamic, jsonSerializerSettings);
            RestProcedure restProcedure = ProcedureFactory.GetRestProcedure("POST", "open", "PERSON"); //following convention shema.METHOD_PROC
            restProcedure.LoadFromJson(postData);
            string json = restProcedure.ExecuteJson();
            Assert.AreEqual(restProcedure.GetValue<int>("RETURN_VALUE"), 200);
            Assert.AreEqual(restProcedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreEqual(restProcedure.GetValue<string>("MESSAGE_RESULT"), null);
            restProcedure.Dispose();
        }


        [TestMethod]
        public void PutPersonJSON()
        {
            RestProcedure restProcedure = ProcedureFactory.GetRestProcedure("PUT", "open", "PERSON"); //following convention shema.METHOD_PROC
            restProcedure.LoadFromJson(personResult);
            string json = restProcedure.ExecuteJson();
            Assert.AreEqual(restProcedure.GetValue<int>("RETURN_VALUE"), 200);
            Assert.AreEqual(restProcedure.GetValue<long>("SQL_ERROR_ID"), 0);
            Assert.AreEqual(restProcedure.GetValue<string>("MESSAGE_RESULT"), null);
            Console.WriteLine(json);
            restProcedure.Dispose();
        }
    }
}
